{"version":3,"file":"filterBuilder.cjs.js","sources":["../../src/helpers/filterBuilder.ts"],"sourcesContent":["/*\n * Copyright 2024 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  FieldFilter,\n  FieldFilterOperatorEnum,\n  Filter,\n  IntrospectionField,\n  LogicalFilter,\n  ProcessInstanceStatusDTO,\n  TypeName,\n} from '@red-hat-developer-hub/backstage-plugin-orchestrator-common';\n\nimport { getProcessInstanceStateFromStatusDTOString } from '../service/api/mapping/V2Mappings';\n\ntype ProcessType = 'ProcessDefinition' | 'ProcessInstance';\n\nfunction isLogicalFilter(filter: Filter): filter is LogicalFilter {\n  return (filter as LogicalFilter).filters !== undefined;\n}\n\nfunction handleLogicalFilter(\n  introspection: IntrospectionField[],\n  type: ProcessType,\n  filter: LogicalFilter,\n): string {\n  if (!filter.operator) return '';\n\n  const subClauses = filter.filters.map(f =>\n    buildFilterCondition(introspection, type, f),\n  );\n\n  return `${filter.operator.toLowerCase()}: {${subClauses.join(', ')}}`;\n}\n\nfunction handleBetweenOperator(filter: FieldFilter): string {\n  if (!Array.isArray(filter.value) || filter.value.length !== 2) {\n    throw new Error('Between operator requires an array of two elements');\n  }\n  return `${filter.field}: {${getGraphQLOperator(\n    FieldFilterOperatorEnum.Between,\n  )}: {from: \"${filter.value[0]}\", to: \"${filter.value[1]}\"}}`;\n}\n\nfunction handleIsNullOperator(filter: FieldFilter): string {\n  return `${filter.field}: {${getGraphQLOperator(\n    FieldFilterOperatorEnum.IsNull,\n  )}: ${convertToBoolean(filter.value)}}`;\n}\n\nfunction isEnumFilter(\n  fieldName: string,\n  type: 'ProcessDefinition' | 'ProcessInstance',\n): boolean {\n  if (type === 'ProcessInstance') {\n    if (fieldName === 'state') {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction convertEnumValue(\n  fieldName: string,\n  fieldValue: string,\n  type: 'ProcessDefinition' | 'ProcessInstance',\n): string {\n  if (type === 'ProcessInstance') {\n    if (fieldName === 'state') {\n      const state = (ProcessInstanceStatusDTO as any)[\n        fieldValue as keyof typeof ProcessInstanceStatusDTO\n      ];\n\n      if (!state) {\n        throw new Error(\n          `status ${fieldValue} is not a valid value of ProcessInstanceStatusDTO`,\n        );\n      }\n      return getProcessInstanceStateFromStatusDTOString(state).valueOf();\n    }\n  }\n  throw new Error(\n    `Unsupported enum ${fieldName}: can't convert value ${fieldValue}`,\n  );\n}\n\nfunction isValidEnumOperator(operator: FieldFilterOperatorEnum): boolean {\n  return (\n    operator === FieldFilterOperatorEnum.In ||\n    operator === FieldFilterOperatorEnum.Eq\n  );\n}\n\nfunction handleBinaryOperator(\n  binaryFilter: FieldFilter,\n  fieldDef: IntrospectionField,\n  type: 'ProcessDefinition' | 'ProcessInstance',\n): string {\n  if (isEnumFilter(binaryFilter.field, type)) {\n    if (!isValidEnumOperator(binaryFilter.operator)) {\n      throw new Error(\n        `Invalid operator ${binaryFilter.operator} for enum field ${binaryFilter.field} filter`,\n      );\n    }\n    binaryFilter.value = convertEnumValue(\n      binaryFilter.field,\n      binaryFilter.value,\n      type,\n    );\n  }\n  const formattedValue = Array.isArray(binaryFilter.value)\n    ? `[${binaryFilter.value\n        .map(v => formatValue(binaryFilter.field, v, fieldDef, type))\n        .join(', ')}]`\n    : formatValue(binaryFilter.field, binaryFilter.value, fieldDef, type);\n  return `${binaryFilter.field}: {${getGraphQLOperator(\n    binaryFilter.operator,\n  )}: ${formattedValue}}`;\n}\n\nexport function buildFilterCondition(\n  introspection: IntrospectionField[],\n  type: ProcessType,\n  filters?: Filter,\n): string {\n  if (!filters) {\n    return '';\n  }\n\n  if (isLogicalFilter(filters)) {\n    return handleLogicalFilter(introspection, type, filters);\n  }\n\n  if (!isOperatorSupported(filters.operator)) {\n    throw new Error(`Unsopported operator ${filters.operator}`);\n  }\n\n  const fieldDef = introspection.find(f => f.name === filters.field);\n  if (!fieldDef) {\n    throw new Error(`Can't find field \"${filters.field}\" definition`);\n  }\n\n  if (!isOperatorAllowedForField(filters.operator, fieldDef)) {\n    throw new Error(`Unsupported field type ${fieldDef.type.name}`);\n  }\n\n  switch (filters.operator) {\n    case FieldFilterOperatorEnum.IsNull:\n      return handleIsNullOperator(filters);\n    case FieldFilterOperatorEnum.Between:\n      return handleBetweenOperator(filters);\n    case FieldFilterOperatorEnum.Eq:\n    case FieldFilterOperatorEnum.Like:\n    case FieldFilterOperatorEnum.In:\n    case FieldFilterOperatorEnum.Gt:\n    case FieldFilterOperatorEnum.Gte:\n    case FieldFilterOperatorEnum.Lt:\n    case FieldFilterOperatorEnum.Lte:\n      return handleBinaryOperator(filters, fieldDef, type);\n\n    default:\n      throw new Error(`Can't build filter condition`);\n  }\n}\n\nfunction isOperatorSupported(operator: FieldFilterOperatorEnum): boolean {\n  return (\n    operator === FieldFilterOperatorEnum.Eq ||\n    operator === FieldFilterOperatorEnum.Like ||\n    operator === FieldFilterOperatorEnum.In ||\n    operator === FieldFilterOperatorEnum.IsNull ||\n    operator === FieldFilterOperatorEnum.Gt ||\n    operator === FieldFilterOperatorEnum.Gte ||\n    operator === FieldFilterOperatorEnum.Lt ||\n    operator === FieldFilterOperatorEnum.Lte ||\n    operator === FieldFilterOperatorEnum.Between\n  );\n}\n\nfunction isFieldFilterSupported(fieldDef: IntrospectionField): boolean {\n  return fieldDef?.type.name === TypeName.String;\n}\n\nfunction isOperatorAllowedForField(\n  operator: FieldFilterOperatorEnum,\n  fieldDef: IntrospectionField,\n): boolean {\n  const allowedOperators: Record<TypeName, FieldFilterOperatorEnum[]> = {\n    [TypeName.String]: [\n      FieldFilterOperatorEnum.In,\n      FieldFilterOperatorEnum.Like,\n      FieldFilterOperatorEnum.IsNull,\n      FieldFilterOperatorEnum.Eq,\n    ],\n    [TypeName.Id]: [\n      FieldFilterOperatorEnum.In,\n      FieldFilterOperatorEnum.IsNull,\n      FieldFilterOperatorEnum.Eq,\n    ],\n    [TypeName.Date]: [\n      FieldFilterOperatorEnum.IsNull,\n      FieldFilterOperatorEnum.Eq,\n      FieldFilterOperatorEnum.Gt,\n      FieldFilterOperatorEnum.Gte,\n      FieldFilterOperatorEnum.Lt,\n      FieldFilterOperatorEnum.Lte,\n      FieldFilterOperatorEnum.Between,\n    ],\n    [TypeName.StringArray]: [],\n  };\n  const allowedForType = allowedOperators[fieldDef.type.name];\n  return allowedForType ? allowedForType.includes(operator) : false;\n}\n\nfunction convertToBoolean(value: any): boolean {\n  if (typeof value === 'boolean') {\n    return value;\n  }\n  if (typeof value === 'string') {\n    return value.toLowerCase() === 'true';\n  }\n  if (typeof value === 'number') {\n    return value === 1;\n  }\n  return false; // Default to false for unsupported types\n}\n\nfunction formatValue(\n  fieldName: string,\n  fieldValue: any,\n  fieldDef: IntrospectionField,\n  type: ProcessType,\n): string {\n  if (!isFieldFilterSupported) {\n    throw new Error(`Unsupported field type ${fieldDef.type.name}`);\n  }\n\n  if (isEnumFilter(fieldName, type)) {\n    return `${fieldValue}`;\n  }\n  if (\n    fieldDef.type.name === TypeName.String ||\n    fieldDef.type.name === TypeName.Id ||\n    fieldDef.type.name === TypeName.Date\n  ) {\n    return `\"${fieldValue}\"`;\n  }\n  throw new Error(\n    `Failed to format value for ${fieldName} ${fieldValue} with type ${fieldDef.type.name}`,\n  );\n}\n\nfunction getGraphQLOperator(operator: FieldFilterOperatorEnum): string {\n  switch (operator) {\n    case 'EQ':\n      return 'equal';\n    case 'LIKE':\n      return 'like';\n    case 'IN':\n      return 'in';\n    case 'IS_NULL':\n      return 'isNull';\n    case 'GT':\n      return 'greaterThan';\n    case 'GTE':\n      return 'greaterThanEqual';\n    case 'LT':\n      return 'lessThan';\n    case 'LTE':\n      return 'lessThanEqual';\n    // case 'CONTAINS':\n    //  return \"contains\"\n    // case 'CONTAINS_ALL':\n    // case 'CONTAINS_ANY':\n    case 'BETWEEN':\n      return 'between';\n    default:\n      throw new Error(`Operation \"${operator}\" not supported`);\n  }\n}\n"],"names":["FieldFilterOperatorEnum","ProcessInstanceStatusDTO","getProcessInstanceStateFromStatusDTOString","TypeName"],"mappings":"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"}