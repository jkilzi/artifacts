{"version":3,"file":"DevModeService.cjs.js","sources":["../../src/service/DevModeService.ts"],"sourcesContent":["/*\n * Copyright 2024 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport type { LoggerService } from '@backstage/backend-plugin-api';\nimport type { Config } from '@backstage/config';\n\nimport fs from 'fs-extra';\n\nimport {\n  DEFAULT_SONATAFLOW_BASE_URL,\n  DEFAULT_SONATAFLOW_CONTAINER_IMAGE,\n  DEFAULT_SONATAFLOW_PERSISTENCE_PATH,\n  DEFAULT_WORKFLOWS_PATH,\n} from '@red-hat-developer-hub/backstage-plugin-orchestrator-common';\n\nimport { spawn } from 'child_process';\nimport { join, resolve } from 'path';\n\nimport { GitService } from './GitService';\nimport { executeWithRetry } from './Helper';\n\nconst SONATA_FLOW_RESOURCES_PATH =\n  '/home/kogito/serverless-workflow-project/src/main/resources';\n\ninterface LauncherCommand {\n  command: string;\n  args: string[];\n}\n\ninterface DevModeConnectionConfig {\n  host: string;\n  port?: number;\n  containerImage: string;\n  resourcesPath: string;\n  persistencePath: string;\n  repoUrl?: string;\n}\n\nexport class DevModeService {\n  private readonly connection: DevModeConnectionConfig;\n  private readonly gitService;\n\n  constructor(\n    config: Config,\n    private readonly logger: LoggerService,\n  ) {\n    this.connection = this.extractConnectionConfig(config);\n    this.gitService = new GitService(logger, config);\n  }\n\n  public get devModeUrl(): string {\n    if (!this.connection.port) {\n      return this.connection.host;\n    }\n    return `${this.connection.host}:${this.connection.port}`;\n  }\n\n  public async launchDevMode(): Promise<boolean> {\n    await this.loadDevWorkflows();\n\n    const isAlreadyUp = await this.isSonataFlowUp(false, this.devModeUrl);\n    if (isAlreadyUp) {\n      return true;\n    }\n\n    this.launchSonataFlow();\n\n    return await this.isSonataFlowUp(true, this.devModeUrl);\n  }\n\n  private async isSonataFlowUp(\n    withRetry: boolean,\n    endpoint: string,\n  ): Promise<boolean> {\n    const healthUrl = `${endpoint}/q/health`;\n    this.logger.info(`Checking SonataFlow health at: ${healthUrl}`);\n\n    try {\n      const response = await executeWithRetry(\n        () => fetch(healthUrl),\n        withRetry ? 15 : 1,\n      );\n      if (response.ok) {\n        this.logger.info('SonataFlow is up and running');\n        return true;\n      }\n    } catch (e) {\n      this.logger.error(`Error when checking SonataFlow health: ${e}`);\n    }\n    return false;\n  }\n\n  private launchSonataFlow(): void {\n    const launcherCmd = this.createLauncherCommand();\n\n    this.logger.info(\n      `Auto starting SonataFlow through: ${\n        launcherCmd.command\n      } ${launcherCmd.args.join(' ')}`,\n    );\n\n    const process = spawn(launcherCmd.command, launcherCmd.args, {\n      shell: false,\n    });\n\n    process.on('close', code => {\n      this.logger.info(`SonataFlow process exited with code ${code}`);\n    });\n\n    process.on('exit', code => {\n      this.logger.info(`SonataFlow process exited with code ${code}`);\n    });\n\n    process.on('error', error => {\n      this.logger.error(`SonataFlow process error: ${error}`);\n    });\n  }\n\n  private createLauncherCommand(): LauncherCommand {\n    const resourcesAbsPath = resolve(\n      join(this.connection.resourcesPath, DEFAULT_WORKFLOWS_PATH),\n    );\n\n    const launcherArgs = [\n      'run',\n      '--name',\n      'backstage-internal-sonataflow',\n      '--add-host',\n      'host.docker.internal:host-gateway',\n    ];\n\n    launcherArgs.push('-e', `QUARKUS_HTTP_PORT=${this.connection.port}`);\n\n    launcherArgs.push('-p', `${this.connection.port}:${this.connection.port}`);\n    launcherArgs.push('-e', `KOGITO_SERVICE_URL=${this.devModeUrl}`);\n    launcherArgs.push(\n      '-v',\n      `${resourcesAbsPath}:${SONATA_FLOW_RESOURCES_PATH}:Z`,\n    );\n    launcherArgs.push('-e', 'KOGITO.CODEGEN.PROCESS.FAILONERROR=false');\n    launcherArgs.push(\n      '-e',\n      `QUARKUS_EMBEDDED_POSTGRESQL_DATA_DIR=${this.connection.persistencePath}`,\n    );\n\n    launcherArgs.push(this.connection.containerImage);\n\n    return {\n      command: 'docker',\n      args: launcherArgs,\n    };\n  }\n\n  private extractConnectionConfig(config: Config): DevModeConnectionConfig {\n    const host =\n      config.getOptionalString('orchestrator.sonataFlowService.baseUrl') ??\n      DEFAULT_SONATAFLOW_BASE_URL;\n    const port = config.getOptionalNumber(\n      'orchestrator.sonataFlowService.port',\n    );\n\n    const resourcesPath =\n      config.getOptionalString(\n        'orchestrator.sonataFlowService.workflowsSource.localPath',\n      ) ?? '';\n\n    const containerImage =\n      config.getOptionalString('orchestrator.sonataFlowService.container') ??\n      DEFAULT_SONATAFLOW_CONTAINER_IMAGE;\n\n    const persistencePath =\n      config.getOptionalString(\n        'orchestrator.sonataFlowService.persistence.path',\n      ) ?? DEFAULT_SONATAFLOW_PERSISTENCE_PATH;\n\n    const repoUrl =\n      config.getOptionalString(\n        'orchestrator.sonataFlowService.workflowsSource.gitRepositoryUrl',\n      ) ?? '';\n\n    return {\n      host,\n      port,\n      containerImage,\n      resourcesPath,\n      persistencePath,\n      repoUrl,\n    };\n  }\n\n  public async loadDevWorkflows() {\n    if (!this.connection.repoUrl) {\n      this.logger.info(\n        'No Git repository configured. Skipping dev workflows loading.',\n      );\n      return;\n    }\n\n    this.logger.info(`Loading dev workflows from ${this.connection.repoUrl}`);\n    const localPath = this.connection.resourcesPath;\n    if (await fs.pathExists(localPath)) {\n      this.logger.info(`Path ${localPath} already exists. Skipping clone.`);\n      return;\n    }\n\n    await this.gitService.clone(this.connection.repoUrl, localPath);\n  }\n}\n"],"names":["GitService","executeWithRetry","spawn","resolve","join","DEFAULT_WORKFLOWS_PATH","DEFAULT_SONATAFLOW_BASE_URL","DEFAULT_SONATAFLOW_CONTAINER_IMAGE","DEFAULT_SONATAFLOW_PERSISTENCE_PATH","fs"],"mappings":"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"}