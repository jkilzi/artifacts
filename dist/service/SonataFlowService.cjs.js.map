{"version":3,"file":"SonataFlowService.cjs.js","sources":["../../src/service/SonataFlowService.ts"],"sourcesContent":["/*\n * Copyright 2024 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { LoggerService } from '@backstage/backend-plugin-api';\n\nimport {\n  extractWorkflowFormat,\n  Filter,\n  fromWorkflowSource,\n  getWorkflowCategory,\n  ProcessInstanceStateValues,\n  ProcessInstanceVariables,\n  WorkflowDefinition,\n  WorkflowExecutionResponse,\n  WorkflowInfo,\n  WorkflowOverview,\n} from '@red-hat-developer-hub/backstage-plugin-orchestrator-common';\n\nimport { Pagination } from '../types/pagination';\nimport { DataIndexService } from './DataIndexService';\n\nexport class SonataFlowService {\n  constructor(\n    private readonly dataIndexService: DataIndexService,\n    private readonly logger: LoggerService,\n  ) {}\n\n  public async fetchWorkflowInfoOnService(args: {\n    definitionId: string;\n    serviceUrl: string;\n  }): Promise<WorkflowInfo | undefined> {\n    const urlToFetch = `${args.serviceUrl}/management/processes/${args.definitionId}`;\n    const response = await fetch(urlToFetch);\n\n    if (response.ok) {\n      const json = await response.json();\n      this.logger.debug(`Fetch workflow info result: ${JSON.stringify(json)}`);\n      return json;\n    }\n    throw new Error(\n      await this.createPrefixFetchErrorMessage(urlToFetch, response),\n    );\n  }\n\n  public async fetchWorkflowDefinition(\n    definitionId: string,\n  ): Promise<WorkflowDefinition | undefined> {\n    const source =\n      await this.dataIndexService.fetchWorkflowSource(definitionId);\n    if (source) {\n      return fromWorkflowSource(source);\n    }\n    return undefined;\n  }\n\n  public async fetchWorkflowOverviews(args: {\n    definitionIds?: string[];\n    pagination?: Pagination;\n    filter?: Filter;\n  }): Promise<WorkflowOverview[] | undefined> {\n    const { definitionIds, pagination, filter } = args;\n    const workflowInfos = await this.dataIndexService.fetchWorkflowInfos({\n      definitionIds,\n      pagination,\n      filter,\n    });\n    if (!workflowInfos?.length) {\n      return [];\n    }\n    const items = await Promise.all(\n      workflowInfos\n        .filter(info => info.source)\n        .map(info => this.fetchWorkflowOverviewBySource(info.source!)),\n    );\n    return items.filter((item): item is WorkflowOverview => !!item);\n  }\n\n  public async executeWorkflow(args: {\n    definitionId: string;\n    serviceUrl: string;\n    inputData?: ProcessInstanceVariables;\n    businessKey?: string;\n  }): Promise<WorkflowExecutionResponse | undefined> {\n    const urlToFetch = args.businessKey\n      ? `${args.serviceUrl}/${args.definitionId}?businessKey=${args.businessKey}`\n      : `${args.serviceUrl}/${args.definitionId}`;\n\n    const response = await fetch(urlToFetch, {\n      method: 'POST',\n      body: JSON.stringify(args.inputData || {}),\n      headers: { 'content-type': 'application/json' },\n    });\n\n    const json = await response.json();\n    if (json.id) {\n      this.logger.debug(\n        `Execute workflow successful. Response: ${JSON.stringify(json)}`,\n      );\n      return json;\n    } else if (!response.ok) {\n      const errorMessage = await this.createPrefixFetchErrorMessage(\n        urlToFetch,\n        response,\n        'POST',\n      );\n      this.logger.error(\n        `Execute workflow failed. Response: ${JSON.stringify(json)}`,\n      );\n      throw new Error(errorMessage);\n    } else {\n      this.logger.error(\n        `Execute workflow did not return a workflow instance ID. Response: ${JSON.stringify(\n          json,\n        )}`,\n      );\n      throw new Error('Execute workflow did not return a workflow instance ID');\n    }\n  }\n\n  public async retriggerInstance(args: {\n    definitionId: string;\n    instanceId: string;\n    serviceUrl: string;\n  }): Promise<boolean> {\n    const urlToFetch = `${args.serviceUrl}/management/processes/${args.definitionId}/instances/${args.instanceId}/retrigger`;\n\n    const response = await fetch(urlToFetch, {\n      method: 'POST',\n    });\n\n    if (!response.ok) {\n      throw new Error(\n        `${await this.createPrefixFetchErrorMessage(\n          urlToFetch,\n          response,\n          'POST',\n        )}`,\n      );\n    }\n\n    return true;\n  }\n\n  public async fetchWorkflowOverview(\n    definitionId: string,\n  ): Promise<WorkflowOverview | undefined> {\n    const source =\n      await this.dataIndexService.fetchWorkflowSource(definitionId);\n    if (!source) {\n      this.logger.debug(`Workflow source not found: ${definitionId}`);\n      return undefined;\n    }\n    return await this.fetchWorkflowOverviewBySource(source);\n  }\n\n  private async fetchWorkflowOverviewBySource(\n    source: string,\n  ): Promise<WorkflowOverview | undefined> {\n    let lastTriggered: Date = new Date(0);\n    let lastRunStatus: ProcessInstanceStateValues | undefined;\n    let lastRunId: string | undefined;\n    const definition = fromWorkflowSource(source);\n\n    const processInstances =\n      await this.dataIndexService.fetchInstancesByDefinitionId({\n        definitionId: definition.id,\n        limit: 1,\n        offset: 0,\n      });\n\n    const pInstance = processInstances[0];\n\n    if (pInstance?.start) {\n      lastRunId = pInstance.id;\n      lastTriggered = new Date(pInstance.start);\n      lastRunStatus = pInstance.state;\n    }\n\n    return {\n      workflowId: definition.id,\n      name: definition.name,\n      format: extractWorkflowFormat(source),\n      lastRunId,\n      lastTriggeredMs: lastTriggered.getTime(),\n      lastRunStatus,\n      category: getWorkflowCategory(definition),\n      description: definition.description,\n    };\n  }\n\n  public async pingWorkflowService(args: {\n    definitionId: string;\n    serviceUrl: string;\n  }): Promise<boolean> {\n    const urlToFetch = `${args.serviceUrl}/management/processes/${args.definitionId}`;\n    const response = await fetch(urlToFetch);\n    return response.ok;\n  }\n\n  public async updateInstanceInputData(args: {\n    definitionId: string;\n    serviceUrl: string;\n    instanceId: string;\n    inputData: ProcessInstanceVariables;\n  }): Promise<boolean> {\n    const { definitionId, serviceUrl, instanceId, inputData } = args;\n    const urlToFetch = `${serviceUrl}/${definitionId}/${instanceId}`;\n    const response = await fetch(urlToFetch, {\n      method: 'PATCH',\n      body: JSON.stringify(inputData),\n      headers: { 'content-type': 'application/json' },\n    });\n    return response.ok;\n  }\n\n  public async createPrefixFetchErrorMessage(\n    urlToFetch: string,\n    response: Response,\n    httpMethod = 'GET',\n  ): Promise<string> {\n    const res = await response.json();\n    const errorInfo = [];\n    let errorMsg = `Request ${httpMethod} ${urlToFetch} failed with: StatusCode: ${response.status}`;\n\n    if (response.statusText) {\n      errorInfo.push(`StatusText: ${response.statusText}`);\n    }\n    if (res?.details) {\n      errorInfo.push(`Details: ${res?.details}`);\n    }\n    if (res?.stack) {\n      errorInfo.push(`Stack: ${res?.stack}`);\n    }\n    if (errorInfo.length > 0) {\n      errorMsg += ` ${errorInfo.join(', ')}`;\n    } else {\n      errorMsg += ' Unexpected error';\n    }\n\n    return errorMsg;\n  }\n}\n"],"names":["fromWorkflowSource","extractWorkflowFormat","getWorkflowCategory"],"mappings":"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"}