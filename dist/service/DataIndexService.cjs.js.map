{"version":3,"file":"DataIndexService.cjs.js","sources":["../../src/service/DataIndexService.ts"],"sourcesContent":["/*\n * Copyright 2024 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { LoggerService } from '@backstage/backend-plugin-api';\n\nimport { Client, fetchExchange, gql } from '@urql/core';\n\nimport {\n  Filter,\n  fromWorkflowSource,\n  getWorkflowCategory,\n  IntrospectionField,\n  parseWorkflowVariables,\n  ProcessInstance,\n  WorkflowDefinition,\n  WorkflowInfo,\n} from '@red-hat-developer-hub/backstage-plugin-orchestrator-common';\n\nimport { ErrorBuilder } from '../helpers/errorBuilder';\nimport { buildFilterCondition } from '../helpers/filterBuilder';\nimport { buildGraphQlQuery } from '../helpers/queryBuilder';\nimport { Pagination } from '../types/pagination';\nimport { FETCH_PROCESS_INSTANCES_SORT_FIELD } from './constants';\n\nexport class DataIndexService {\n  private readonly client: Client;\n  public processDefinitionArguments: IntrospectionField[] = [];\n  public processInstanceArguments: IntrospectionField[] = [];\n\n  public constructor(\n    private readonly dataIndexUrl: string,\n    private readonly logger: LoggerService,\n  ) {\n    if (!dataIndexUrl.length) {\n      throw ErrorBuilder.GET_NO_DATA_INDEX_URL_ERR();\n    }\n\n    this.client = this.getNewGraphQLClient();\n  }\n\n  private getNewGraphQLClient(): Client {\n    const diURL = `${this.dataIndexUrl}/graphql`;\n    return new Client({\n      url: diURL,\n      exchanges: [fetchExchange],\n    });\n  }\n\n  public async initInputProcessDefinitionArgs(): Promise<IntrospectionField[]> {\n    if (this.processDefinitionArguments.length === 0) {\n      this.processDefinitionArguments =\n        await this.inspectInputArgument('ProcessDefinition');\n    }\n    return this.processDefinitionArguments; // For testing purposes\n  }\n\n  public graphQLArgumentQuery(type: string): string {\n    return `query ${type}Argument {\n        __type(name: \"${type}Argument\") {\n          kind\n          name\n          inputFields {\n            name\n            type {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                  }\n                }\n              }\n            }\n          }\n        }\n      }`;\n  }\n\n  public async inspectInputArgument(\n    type: string,\n  ): Promise<IntrospectionField[]> {\n    const result = await this.client.query(this.graphQLArgumentQuery(type), {});\n\n    this.logger.debug(`Introspection query result: ${JSON.stringify(result)}`);\n\n    if (result?.error) {\n      this.logger.error(`Error executing introspection query ${result.error}`);\n      throw result.error;\n    }\n\n    const pairs: IntrospectionField[] = [];\n    if (result?.data?.__type?.inputFields) {\n      for (const field of result.data.__type.inputFields) {\n        if (\n          field.name !== 'and' &&\n          field.name !== 'or' &&\n          field.name !== 'not'\n        ) {\n          pairs.push({\n            name: field.name,\n            type: {\n              name: field.type.name,\n              kind: field.type.kind,\n              ofType: field.type.ofType,\n            },\n          });\n        }\n      }\n    }\n    return pairs;\n  }\n\n  public async abortWorkflowInstance(instanceId: string): Promise<void> {\n    this.logger.info(`Aborting workflow instance ${instanceId}`);\n    const ProcessInstanceAbortMutationDocument = gql`\n      mutation ProcessInstanceAbortMutation($id: String) {\n        ProcessInstanceAbort(id: $id)\n      }\n    `;\n\n    const result = await this.client.mutation(\n      ProcessInstanceAbortMutationDocument,\n      { id: instanceId },\n    );\n\n    this.logger.debug(\n      `Abort workflow instance result: ${JSON.stringify(result)}`,\n    );\n\n    if (result.error) {\n      throw new Error(\n        `Error aborting workflow instance ${instanceId}: ${result.error}`,\n      );\n    }\n    this.logger.debug(`Successfully aborted workflow instance ${instanceId}`);\n  }\n\n  public async fetchWorkflowInfo(\n    definitionId: string,\n  ): Promise<WorkflowInfo | undefined> {\n    const graphQlQuery = `{ ProcessDefinitions ( where: {id: {equal: \"${definitionId}\" } } ) { id, name, version, type, endpoint, serviceUrl, source } }`;\n\n    const result = await this.client.query(graphQlQuery, {});\n\n    this.logger.debug(\n      `Get workflow definition result: ${JSON.stringify(result)}`,\n    );\n\n    if (result.error) {\n      this.logger.error(`Error fetching workflow definition ${result.error}`);\n      throw result.error;\n    }\n\n    const processDefinitions = result.data.ProcessDefinitions as WorkflowInfo[];\n\n    if (processDefinitions.length === 0) {\n      this.logger.info(`No workflow definition found for ${definitionId}`);\n      return undefined;\n    }\n\n    return processDefinitions[0];\n  }\n\n  public async fetchWorkflowServiceUrls(): Promise<Record<string, string>> {\n    const graphQlQuery = `{ ProcessDefinitions { id, serviceUrl } }`;\n\n    const result = await this.client.query(graphQlQuery, {});\n\n    this.logger.debug(\n      `Get workflow service urls result: ${JSON.stringify(result)}`,\n    );\n\n    if (result.error) {\n      this.logger.error(`Error fetching workflow service urls ${result.error}`);\n      throw result.error;\n    }\n\n    const processDefinitions = result.data.ProcessDefinitions as WorkflowInfo[];\n    return processDefinitions\n      .filter(definition => definition.serviceUrl)\n      .map(definition => ({ [definition.id]: definition.serviceUrl! }))\n      .reduce((acc, curr) => ({ ...acc, ...curr }), {});\n  }\n\n  public async fetchWorkflowInfos(args: {\n    definitionIds?: string[];\n    pagination?: Pagination;\n    filter?: Filter;\n  }): Promise<WorkflowInfo[]> {\n    this.logger.info(`fetchWorkflowInfos() called: ${this.dataIndexUrl}`);\n    const { definitionIds, pagination, filter } = args;\n\n    const definitionIdsCondition =\n      definitionIds !== undefined && definitionIds.length > 0\n        ? `id: {in: ${JSON.stringify(definitionIds)}}`\n        : undefined;\n\n    const filterCondition = filter\n      ? buildFilterCondition(\n          await this.initInputProcessDefinitionArgs(),\n          'ProcessDefinition',\n          filter,\n        )\n      : undefined;\n\n    let whereClause: string | undefined;\n    if (definitionIds && filter) {\n      whereClause = `and: [{${definitionIdsCondition}}, {${filterCondition}}]`;\n    } else if (definitionIdsCondition || filterCondition) {\n      whereClause = definitionIdsCondition ?? filterCondition;\n    } else {\n      whereClause = undefined;\n    }\n\n    const graphQlQuery = buildGraphQlQuery({\n      type: 'ProcessDefinitions',\n      queryBody: 'id, name, version, type, endpoint, serviceUrl, source',\n      whereClause,\n      pagination,\n    });\n    this.logger.debug(`GraphQL query: ${graphQlQuery}`);\n    const result = await this.client.query(graphQlQuery, {});\n    this.logger.debug(\n      `Get workflow definitions result: ${JSON.stringify(result)}`,\n    );\n\n    if (result.error) {\n      this.logger.error(\n        `Error fetching data index swf results ${result.error}`,\n      );\n      throw result.error;\n    }\n\n    return result.data.ProcessDefinitions;\n  }\n\n  public async fetchInstances(args: {\n    definitionIds?: string[];\n    pagination?: Pagination;\n    filter?: Filter;\n  }): Promise<ProcessInstance[]> {\n    const { pagination, definitionIds, filter } = args;\n    if (pagination) pagination.sortField ??= FETCH_PROCESS_INSTANCES_SORT_FIELD;\n\n    const processIdNotNullCondition = 'processId: {isNull: false}';\n    const definitionIdsCondition = definitionIds\n      ? `processId: {in: ${JSON.stringify(definitionIds)}}`\n      : undefined;\n    const type = 'ProcessInstance';\n    const filterCondition = filter\n      ? buildFilterCondition(\n          await this.inspectInputArgument(type),\n          type,\n          filter,\n        )\n      : '';\n\n    let whereClause = '';\n    const conditions = [];\n\n    if (processIdNotNullCondition) {\n      conditions.push(`{${processIdNotNullCondition}}`);\n    }\n\n    if (definitionIdsCondition) {\n      conditions.push(`{${definitionIdsCondition}}`);\n    }\n\n    if (filter) {\n      conditions.push(`{${filterCondition}}`);\n    }\n\n    if (conditions.length === 0) {\n      whereClause = processIdNotNullCondition;\n    } else if (conditions.length === 1) {\n      whereClause = conditions[0].slice(1, -1); // Remove the outer braces\n    } else if (conditions.length > 1) {\n      whereClause = `and: [${conditions.join(', ')}]`;\n    }\n\n    const graphQlQuery = buildGraphQlQuery({\n      type: 'ProcessInstances',\n      queryBody:\n        'id, processName, processId, businessKey, state, start, end, nodes { id }, variables, parentProcessInstance {id, processName, businessKey}',\n      whereClause,\n      pagination,\n    });\n\n    this.logger.debug(`GraphQL query: ${graphQlQuery}`);\n\n    const result = await this.client.query(graphQlQuery, {});\n\n    this.logger.debug(\n      `Fetch process instances result: ${JSON.stringify(result)}`,\n    );\n\n    const processInstancesSrc = result.data\n      .ProcessInstances as ProcessInstance[];\n\n    const processInstances = await Promise.all(\n      processInstancesSrc.map(async instance => {\n        return await this.getWorkflowDefinitionFromInstance(instance);\n      }),\n    );\n    return processInstances;\n  }\n\n  public async fetchInstancesTotalCount(\n    definitionIds?: string[],\n    filter?: Filter,\n  ): Promise<number> {\n    const definitionIdsCondition = definitionIds\n      ? `processId: {in: ${JSON.stringify(definitionIds)}}`\n      : undefined;\n    this.initInputProcessDefinitionArgs();\n    const filterCondition = filter\n      ? buildFilterCondition(\n          await this.inspectInputArgument('ProcessInstance'),\n          'ProcessInstance',\n          filter,\n        )\n      : '';\n\n    let whereClause: string | undefined;\n    if (definitionIds && filter) {\n      whereClause = `and: [{${definitionIdsCondition}}, {${filterCondition}}]`;\n    } else if (definitionIdsCondition || filterCondition) {\n      whereClause = definitionIdsCondition ?? filterCondition;\n    }\n\n    const graphQlQuery = buildGraphQlQuery({\n      type: 'ProcessInstances',\n      queryBody: 'id',\n      whereClause,\n    });\n    this.logger.debug(`GraphQL query: ${graphQlQuery}`);\n\n    const result = await this.client.query(graphQlQuery, {});\n\n    if (result.error) {\n      this.logger.error(\n        `Error when fetching instances total count: ${result.error}`,\n      );\n      throw result.error;\n    }\n\n    const idArr = result.data.ProcessInstances as ProcessInstance[];\n\n    return idArr.length;\n  }\n\n  private async getWorkflowDefinitionFromInstance(instance: ProcessInstance) {\n    const workflowInfo = await this.fetchWorkflowInfo(instance.processId);\n    if (!workflowInfo?.source) {\n      throw new Error(\n        `Workflow defintion is required to fetch instance ${instance.id}`,\n      );\n    }\n    const workflowDefinitionSrc: WorkflowDefinition = fromWorkflowSource(\n      workflowInfo.source,\n    );\n    if (workflowInfo) {\n      instance.category = getWorkflowCategory(workflowDefinitionSrc);\n      instance.description = workflowInfo.description;\n    }\n    return instance;\n  }\n\n  public async fetchWorkflowSource(\n    definitionId: string,\n  ): Promise<string | undefined> {\n    const graphQlQuery = `{ ProcessDefinitions ( where: {id: {equal: \"${definitionId}\" } } ) { id, source } }`;\n\n    const result = await this.client.query(graphQlQuery, {});\n\n    this.logger.debug(\n      `Fetch workflow source result: ${JSON.stringify(result)}`,\n    );\n\n    if (result.error) {\n      this.logger.error(`Error when fetching workflow source: ${result.error}`);\n      return undefined;\n    }\n\n    const processDefinitions = result.data.ProcessDefinitions as WorkflowInfo[];\n\n    if (processDefinitions.length === 0) {\n      this.logger.info(`No workflow source found for ${definitionId}`);\n      return undefined;\n    }\n\n    return processDefinitions[0].source;\n  }\n\n  public async fetchInstancesByDefinitionId(args: {\n    definitionId: string;\n    limit: number;\n    offset: number;\n  }): Promise<ProcessInstance[]> {\n    const graphQlQuery = `{ ProcessInstances(where: {processId: {equal: \"${args.definitionId}\" } }, orderBy: {start:DESC}, pagination: {limit: ${args.limit}, offset: ${args.offset}}) { id, processName, state, start, end } }`;\n\n    const result = await this.client.query(graphQlQuery, {});\n\n    this.logger.debug(\n      `Fetch workflow instances result: ${JSON.stringify(result)}`,\n    );\n\n    if (result.error) {\n      this.logger.error(\n        `Error when fetching workflow instances: ${result.error}`,\n      );\n      throw result.error;\n    }\n\n    return result.data.ProcessInstances;\n  }\n\n  public async fetchInstanceVariables(\n    instanceId: string,\n  ): Promise<object | undefined> {\n    const graphQlQuery = `{ ProcessInstances (where: { id: {equal: \"${instanceId}\" } } ) { variables } }`;\n\n    const result = await this.client.query(graphQlQuery, {});\n\n    this.logger.debug(\n      `Fetch process instance variables result: ${JSON.stringify(result)}`,\n    );\n\n    if (result.error) {\n      this.logger.error(\n        `Error when fetching process instance variables: ${result.error}`,\n      );\n      throw result.error;\n    }\n\n    const processInstances = result.data.ProcessInstances as ProcessInstance[];\n\n    if (processInstances.length === 0) {\n      return undefined;\n    }\n\n    return parseWorkflowVariables(processInstances[0].variables as object);\n  }\n\n  public async fetchDefinitionIdByInstanceId(\n    instanceId: string,\n  ): Promise<string | undefined> {\n    const graphQlQuery = `{ ProcessInstances (where: { id: {equal: \"${instanceId}\" } } ) { processId } }`;\n\n    const result = await this.client.query(graphQlQuery, {});\n\n    this.logger.debug(\n      `Fetch process id from instance result: ${JSON.stringify(result)}`,\n    );\n\n    if (result.error) {\n      this.logger.error(\n        `Error when fetching process id from instance: ${result.error}`,\n      );\n      throw result.error;\n    }\n\n    const processInstances = result.data.ProcessInstances as ProcessInstance[];\n\n    if (processInstances.length === 0) {\n      return undefined;\n    }\n\n    return processInstances[0].processId;\n  }\n\n  public async fetchInstance(\n    instanceId: string,\n  ): Promise<ProcessInstance | undefined> {\n    const FindProcessInstanceQuery = gql`\n      query FindProcessInstanceQuery($instanceId: String!) {\n        ProcessInstances(where: { id: { equal: $instanceId } }) {\n          id\n          processName\n          processId\n          serviceUrl\n          businessKey\n          state\n          start\n          end\n          nodes {\n            id\n            nodeId\n            definitionId\n            type\n            name\n            enter\n            exit\n          }\n          variables\n          parentProcessInstance {\n            id\n            processName\n            businessKey\n          }\n          error {\n            nodeDefinitionId\n            message\n          }\n        }\n      }\n    `;\n\n    const result = await this.client.query(FindProcessInstanceQuery, {\n      instanceId,\n    });\n\n    this.logger.debug(\n      `Fetch process instance result: ${JSON.stringify(result)}`,\n    );\n\n    if (result.error) {\n      this.logger.error(\n        `Error when fetching process instances: ${result.error}`,\n      );\n      throw result.error;\n    }\n\n    const processInstances = result.data.ProcessInstances as ProcessInstance[];\n\n    if (processInstances.length === 0) {\n      return undefined;\n    }\n\n    const instance = processInstances[0];\n\n    const workflowInfo = await this.fetchWorkflowInfo(instance.processId);\n    if (!workflowInfo?.source) {\n      throw new Error(\n        `Workflow defintion is required to fetch instance ${instance.id}`,\n      );\n    }\n    const workflowDefinitionSrc: WorkflowDefinition = fromWorkflowSource(\n      workflowInfo.source,\n    );\n    if (workflowInfo) {\n      instance.category = getWorkflowCategory(workflowDefinitionSrc);\n      instance.description = workflowDefinitionSrc.description;\n    }\n    return instance;\n  }\n}\n"],"names":["ErrorBuilder","Client","fetchExchange","gql","buildFilterCondition","buildGraphQlQuery","FETCH_PROCESS_INSTANCES_SORT_FIELD","fromWorkflowSource","getWorkflowCategory","parseWorkflowVariables"],"mappings":"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"}