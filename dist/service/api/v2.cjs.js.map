{"version":3,"file":"v2.cjs.js","sources":["../../../src/service/api/v2.ts"],"sourcesContent":["/*\n * Copyright 2024 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { ParsedRequest } from 'openapi-backend';\n\nimport {\n  AssessedProcessInstanceDTO,\n  ExecuteWorkflowRequestDTO,\n  ExecuteWorkflowResponseDTO,\n  Filter,\n  ProcessInstance,\n  ProcessInstanceListResultDTO,\n  ProcessInstanceState,\n  ProcessInstanceVariables,\n  WorkflowDTO,\n  WorkflowInfo,\n  WorkflowOverviewDTO,\n  WorkflowOverviewListResultDTO,\n  WorkflowRunStatusDTO,\n} from '@red-hat-developer-hub/backstage-plugin-orchestrator-common';\n\nimport { Pagination } from '../../types/pagination';\nimport { retryAsyncFunction } from '../Helper';\nimport { OrchestratorService } from '../OrchestratorService';\nimport {\n  mapToExecuteWorkflowResponseDTO,\n  mapToProcessInstanceDTO,\n  mapToWorkflowDTO,\n  mapToWorkflowOverviewDTO,\n  mapToWorkflowRunStatusDTO,\n} from './mapping/V2Mappings';\n\nconst FETCH_INSTANCE_MAX_ATTEMPTS = 10;\nconst FETCH_INSTANCE_RETRY_DELAY_MS = 1000;\n\nexport class V2 {\n  constructor(private readonly orchestratorService: OrchestratorService) {}\n\n  public async getWorkflowsOverview(\n    pagination: Pagination,\n    filter?: Filter,\n  ): Promise<WorkflowOverviewListResultDTO> {\n    const overviews = await this.orchestratorService.fetchWorkflowOverviews({\n      pagination,\n      filter,\n    });\n    if (!overviews) {\n      throw new Error(\"Couldn't fetch workflow overviews\");\n    }\n    const result: WorkflowOverviewListResultDTO = {\n      overviews: overviews.map(item => mapToWorkflowOverviewDTO(item)),\n      paginationInfo: {\n        pageSize: pagination.limit,\n        offset: pagination.offset,\n        totalCount: overviews.length,\n      },\n    };\n    return result;\n  }\n\n  public async getWorkflowOverviewById(\n    workflowId: string,\n  ): Promise<WorkflowOverviewDTO> {\n    const overview = await this.orchestratorService.fetchWorkflowOverview({\n      definitionId: workflowId,\n      cacheHandler: 'throw',\n    });\n\n    if (!overview) {\n      throw new Error(`Couldn't fetch workflow overview for ${workflowId}`);\n    }\n    return mapToWorkflowOverviewDTO(overview);\n  }\n\n  public async getWorkflowById(workflowId: string): Promise<WorkflowDTO> {\n    const resultV1 = await this.getWorkflowSourceById(workflowId);\n    return mapToWorkflowDTO(resultV1);\n  }\n\n  public async getWorkflowSourceById(workflowId: string): Promise<string> {\n    const source = await this.orchestratorService.fetchWorkflowSource({\n      definitionId: workflowId,\n      cacheHandler: 'throw',\n    });\n\n    if (!source) {\n      throw new Error(`Couldn't fetch workflow source for ${workflowId}`);\n    }\n\n    return source;\n  }\n\n  public async getInstances(\n    pagination?: Pagination,\n    filter?: Filter,\n    workflowId?: string,\n  ): Promise<ProcessInstanceListResultDTO> {\n    const instances = await this.orchestratorService.fetchInstances({\n      pagination,\n      filter,\n      workflowId,\n    });\n    const totalCount = await this.orchestratorService.fetchInstancesTotalCount(\n      workflowId,\n      filter,\n    );\n\n    const result: ProcessInstanceListResultDTO = {\n      items: instances?.map(mapToProcessInstanceDTO),\n      paginationInfo: {\n        pageSize: pagination?.limit,\n        offset: pagination?.offset,\n        totalCount: totalCount,\n      },\n    };\n    return result;\n  }\n\n  public async getInstanceById(\n    instanceId: string,\n    includeAssessment: boolean = false,\n  ): Promise<AssessedProcessInstanceDTO> {\n    const instance = await this.orchestratorService.fetchInstance({\n      instanceId,\n      cacheHandler: 'throw',\n    });\n\n    if (!instance) {\n      throw new Error(`Couldn't fetch process instance ${instanceId}`);\n    }\n\n    let assessedByInstance: ProcessInstance | undefined;\n\n    if (includeAssessment && instance.businessKey) {\n      assessedByInstance = await this.orchestratorService.fetchInstance({\n        instanceId: instance.businessKey,\n        cacheHandler: 'throw',\n      });\n    }\n\n    return {\n      instance: mapToProcessInstanceDTO(instance),\n      assessedBy: assessedByInstance\n        ? mapToProcessInstanceDTO(assessedByInstance)\n        : undefined,\n    };\n  }\n\n  public async executeWorkflow(\n    executeWorkflowRequestDTO: ExecuteWorkflowRequestDTO,\n    workflowId: string,\n    businessKey: string | undefined,\n  ): Promise<ExecuteWorkflowResponseDTO> {\n    const definition = await this.orchestratorService.fetchWorkflowInfo({\n      definitionId: workflowId,\n      cacheHandler: 'throw',\n    });\n    if (!definition) {\n      throw new Error(`Couldn't fetch workflow definition for ${workflowId}`);\n    }\n    if (!definition.serviceUrl) {\n      throw new Error(`ServiceURL is not defined for workflow ${workflowId}`);\n    }\n    const executionResponse = await this.orchestratorService.executeWorkflow({\n      definitionId: workflowId,\n      inputData:\n        executeWorkflowRequestDTO.inputData as ProcessInstanceVariables,\n      serviceUrl: definition.serviceUrl,\n      businessKey,\n      cacheHandler: 'throw',\n    });\n\n    if (!executionResponse) {\n      throw new Error(`Couldn't execute workflow ${workflowId}`);\n    }\n\n    // Making sure the instance data is available before returning\n    await retryAsyncFunction({\n      asyncFn: () =>\n        this.orchestratorService.fetchInstance({\n          instanceId: executionResponse.id,\n          cacheHandler: 'throw',\n        }),\n      maxAttempts: FETCH_INSTANCE_MAX_ATTEMPTS,\n      delayMs: FETCH_INSTANCE_RETRY_DELAY_MS,\n    });\n\n    if (!executionResponse) {\n      throw new Error('Error executing workflow with id ${workflowId}');\n    }\n\n    return mapToExecuteWorkflowResponseDTO(workflowId, executionResponse);\n  }\n\n  public async retriggerInstance(\n    workflowId: string,\n    instanceId: string,\n  ): Promise<void> {\n    const definition = await this.orchestratorService.fetchWorkflowInfo({\n      definitionId: workflowId,\n      cacheHandler: 'throw',\n    });\n    if (!definition) {\n      throw new Error(`Couldn't fetch workflow definition for ${workflowId}`);\n    }\n    if (!definition.serviceUrl) {\n      throw new Error(`ServiceURL is not defined for workflow ${workflowId}`);\n    }\n    const response = await this.orchestratorService.retriggerWorkflow({\n      definitionId: workflowId,\n      instanceId: instanceId,\n      serviceUrl: definition.serviceUrl,\n      cacheHandler: 'throw',\n    });\n\n    if (!response) {\n      throw new Error(\n        `Couldn't retrigger instance ${instanceId} of workflow ${workflowId}`,\n      );\n    }\n  }\n\n  public async abortWorkflow(instanceId: string): Promise<string> {\n    await this.orchestratorService.abortWorkflowInstance({\n      instanceId,\n      cacheHandler: 'throw',\n    });\n    return `Workflow instance ${instanceId} successfully aborted`;\n  }\n\n  public async getWorkflowStatuses(): Promise<WorkflowRunStatusDTO[]> {\n    return [\n      ProcessInstanceState.Active,\n      ProcessInstanceState.Error,\n      ProcessInstanceState.Completed,\n      ProcessInstanceState.Aborted,\n      ProcessInstanceState.Suspended,\n      ProcessInstanceState.Pending,\n    ].map(status => mapToWorkflowRunStatusDTO(status));\n  }\n\n  public async getWorkflowInputSchemaById(\n    workflowId: string,\n    serviceUrl: string,\n  ): Promise<WorkflowInfo | undefined> {\n    return this.orchestratorService.fetchWorkflowInfoOnService({\n      definitionId: workflowId,\n      serviceUrl: serviceUrl,\n      cacheHandler: 'throw',\n    });\n  }\n\n  public extractQueryParam(\n    req: ParsedRequest,\n    key: string,\n  ): string | undefined {\n    return req.query[key] as string | undefined;\n  }\n}\n"],"names":["mapToWorkflowOverviewDTO","mapToWorkflowDTO","mapToProcessInstanceDTO","retryAsyncFunction","mapToExecuteWorkflowResponseDTO","ProcessInstanceState","mapToWorkflowRunStatusDTO"],"mappings":"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"}