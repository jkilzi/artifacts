{"version":3,"file":"V2Mappings.cjs.js","sources":["../../../../src/service/api/mapping/V2Mappings.ts"],"sourcesContent":["/*\n * Copyright 2024 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport moment from 'moment';\n\nimport {\n  capitalize,\n  ExecuteWorkflowResponseDTO,\n  extractWorkflowFormat,\n  fromWorkflowSource,\n  getWorkflowCategory,\n  NodeInstance,\n  NodeInstanceDTO,\n  ProcessInstance,\n  ProcessInstanceDTO,\n  ProcessInstanceState,\n  ProcessInstanceStatusDTO,\n  WorkflowCategory,\n  WorkflowCategoryDTO,\n  WorkflowDefinition,\n  WorkflowDTO,\n  WorkflowExecutionResponse,\n  WorkflowFormatDTO,\n  WorkflowOverview,\n  WorkflowOverviewDTO,\n  WorkflowRunStatusDTO,\n} from '@red-hat-developer-hub/backstage-plugin-orchestrator-common';\n\n// Mapping functions\nexport function mapToWorkflowOverviewDTO(\n  overview: WorkflowOverview,\n): WorkflowOverviewDTO {\n  return {\n    name: overview.name,\n    format: overview.format,\n    workflowId: overview.workflowId,\n    description: overview.description,\n    lastRunId: overview.lastRunId,\n    lastRunStatus: overview.lastRunStatus\n      ? getProcessInstancesStatusDTOFromString(overview.lastRunStatus)\n      : undefined,\n    lastTriggeredMs: overview.lastTriggeredMs,\n    category: mapWorkflowCategoryDTOFromString(overview.category),\n  };\n}\n\nexport function mapWorkflowCategoryDTOFromString(\n  category?: string,\n): WorkflowCategoryDTO {\n  return category?.toLocaleLowerCase() === 'assessment'\n    ? 'assessment'\n    : 'infrastructure';\n}\n\nexport function getWorkflowCategoryDTO(\n  definition: WorkflowDefinition | undefined,\n): WorkflowCategoryDTO {\n  return getWorkflowCategory(definition);\n}\n\nexport function getWorkflowFormatDTO(source: string): WorkflowFormatDTO {\n  return extractWorkflowFormat(source);\n}\n\nexport function mapToWorkflowDTO(source: string): WorkflowDTO {\n  const definition = fromWorkflowSource(source);\n  return {\n    annotations: definition.annotations,\n    category: getWorkflowCategoryDTO(definition),\n    description: definition.description,\n    name: definition.name,\n    format: getWorkflowFormatDTO(source),\n    id: definition.id,\n  };\n}\n\nexport function mapWorkflowCategoryDTO(\n  category?: WorkflowCategory,\n): WorkflowCategoryDTO {\n  if (category === WorkflowCategory.ASSESSMENT) {\n    return 'assessment';\n  }\n  return 'infrastructure';\n}\n\nexport function getProcessInstancesStatusDTOFromString(\n  state?: string,\n): ProcessInstanceStatusDTO {\n  switch (state) {\n    case ProcessInstanceState.Active.valueOf():\n      return 'Active';\n    case ProcessInstanceState.Error.valueOf():\n      return 'Error';\n    case ProcessInstanceState.Completed.valueOf():\n      return 'Completed';\n    case ProcessInstanceState.Aborted.valueOf():\n      return 'Aborted';\n    case ProcessInstanceState.Suspended.valueOf():\n      return 'Suspended';\n    case ProcessInstanceState.Pending.valueOf():\n      return 'Pending';\n    default:\n      throw new Error(\n        `state ${state} is not one of the values of type ProcessInstanceStatusDTO`,\n      );\n  }\n}\n\nexport function getProcessInstanceStateFromStatusDTOString(\n  status?: ProcessInstanceStatusDTO,\n): string {\n  switch (status) {\n    case 'Active':\n      return ProcessInstanceState.Active.valueOf();\n    case 'Error':\n      return ProcessInstanceState.Error.valueOf();\n    case 'Completed':\n      return ProcessInstanceState.Completed.valueOf();\n    case 'Aborted':\n      return ProcessInstanceState.Aborted.valueOf();\n    case 'Suspended':\n      return ProcessInstanceState.Suspended.valueOf();\n    case 'Pending':\n      return ProcessInstanceState.Pending.valueOf();\n    default:\n      throw new Error(\n        `status ${status} is not one of the values of type ProcessInstanceState`,\n      );\n  }\n}\n\nexport function mapToProcessInstanceDTO(\n  processInstance: ProcessInstance,\n): ProcessInstanceDTO {\n  const start = moment(processInstance.start);\n  const end = moment(processInstance.end);\n  const duration = processInstance.end\n    ? moment.duration(start.diff(end)).humanize()\n    : undefined;\n\n  let variables: Record<string, unknown> | undefined;\n  if (typeof processInstance?.variables === 'string') {\n    variables = JSON.parse(processInstance?.variables);\n  } else {\n    variables = processInstance?.variables;\n  }\n\n  return {\n    id: processInstance.id,\n    processId: processInstance.processId,\n    processName: processInstance.processName,\n    description: processInstance.description,\n    serviceUrl: processInstance.serviceUrl,\n    businessKey: processInstance.businessKey,\n    endpoint: processInstance.endpoint,\n    error: processInstance.error,\n    category: mapWorkflowCategoryDTO(processInstance.category),\n    start: processInstance.start,\n    end: processInstance.end,\n    duration: duration,\n    // @ts-ignore\n    workflowdata: variables?.workflowdata,\n    status: getProcessInstancesStatusDTOFromString(processInstance.state),\n    nodes: processInstance.nodes.map(mapToNodeInstanceDTO),\n  };\n}\n\nexport function mapToNodeInstanceDTO(\n  nodeInstance: NodeInstance,\n): NodeInstanceDTO {\n  return { ...nodeInstance, __typename: 'NodeInstance' };\n}\n\nexport function mapToExecuteWorkflowResponseDTO(\n  workflowId: string,\n  workflowExecutionResponse: WorkflowExecutionResponse,\n): ExecuteWorkflowResponseDTO {\n  if (!workflowExecutionResponse?.id) {\n    throw new Error(\n      `Error while mapping ExecuteWorkflowResponse to ExecuteWorkflowResponseDTO for workflow with id ${workflowId}`,\n    );\n  }\n\n  return {\n    id: workflowExecutionResponse.id,\n  };\n}\n\nexport function mapToWorkflowRunStatusDTO(\n  status: ProcessInstanceState,\n): WorkflowRunStatusDTO {\n  return {\n    key: capitalize(status),\n    value: status,\n  };\n}\n"],"names":["getWorkflowCategory","extractWorkflowFormat","fromWorkflowSource","WorkflowCategory","ProcessInstanceState","moment","capitalize"],"mappings":"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"}