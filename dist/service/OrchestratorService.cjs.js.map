{"version":3,"file":"OrchestratorService.cjs.js","sources":["../../src/service/OrchestratorService.ts"],"sourcesContent":["/*\n * Copyright 2024 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  Filter,\n  ProcessInstance,\n  ProcessInstanceVariables,\n  WorkflowDefinition,\n  WorkflowExecutionResponse,\n  WorkflowInfo,\n  WorkflowOverview,\n} from '@red-hat-developer-hub/backstage-plugin-orchestrator-common';\n\nimport { Pagination } from '../types/pagination';\nimport { DataIndexService } from './DataIndexService';\nimport { SonataFlowService } from './SonataFlowService';\nimport { CacheHandler, WorkflowCacheService } from './WorkflowCacheService';\n\nexport class OrchestratorService {\n  constructor(\n    private readonly sonataFlowService: SonataFlowService,\n    private readonly dataIndexService: DataIndexService,\n    private readonly workflowCacheService: WorkflowCacheService,\n  ) {}\n\n  // Data Index Service Wrapper\n\n  public async abortWorkflowInstance(args: {\n    instanceId: string;\n    cacheHandler?: CacheHandler;\n  }): Promise<void> {\n    const { instanceId, cacheHandler } = args;\n    const definitionId =\n      await this.dataIndexService.fetchDefinitionIdByInstanceId(instanceId);\n    const isWorkflowAvailable = this.workflowCacheService.isAvailable(\n      definitionId,\n      cacheHandler,\n    );\n    return isWorkflowAvailable\n      ? await this.dataIndexService.abortWorkflowInstance(instanceId)\n      : undefined;\n  }\n\n  public async fetchWorkflowInfo(args: {\n    definitionId: string;\n    cacheHandler?: CacheHandler;\n  }): Promise<WorkflowInfo | undefined> {\n    const { definitionId, cacheHandler } = args;\n    const isWorkflowAvailable = this.workflowCacheService.isAvailable(\n      definitionId,\n      cacheHandler,\n    );\n    return isWorkflowAvailable\n      ? await this.dataIndexService.fetchWorkflowInfo(definitionId)\n      : undefined;\n  }\n\n  public async fetchInstances(args: {\n    pagination?: Pagination;\n    filter?: Filter;\n    workflowId?: string;\n  }): Promise<ProcessInstance[]> {\n    const definitionIds = args.workflowId\n      ? [args.workflowId]\n      : this.workflowCacheService.definitionIds;\n    return await this.dataIndexService.fetchInstances({\n      definitionIds: definitionIds,\n      pagination: args.pagination,\n      filter: args.filter,\n    });\n  }\n\n  public async fetchInstancesTotalCount(\n    workflowId?: string,\n    filter?: Filter,\n  ): Promise<number> {\n    const definitionIds = workflowId\n      ? [workflowId]\n      : this.workflowCacheService.definitionIds;\n    return await this.dataIndexService.fetchInstancesTotalCount(\n      definitionIds,\n      filter,\n    );\n  }\n\n  public async fetchWorkflowSource(args: {\n    definitionId: string;\n    cacheHandler?: CacheHandler;\n  }): Promise<string | undefined> {\n    const { definitionId, cacheHandler } = args;\n    const isWorkflowAvailable = this.workflowCacheService.isAvailable(\n      definitionId,\n      cacheHandler,\n    );\n    return isWorkflowAvailable\n      ? await this.dataIndexService.fetchWorkflowSource(definitionId)\n      : undefined;\n  }\n\n  public async fetchInstanceVariables(args: {\n    instanceId: string;\n    cacheHandler?: CacheHandler;\n  }): Promise<object | undefined> {\n    const { instanceId, cacheHandler } = args;\n    const definitionId =\n      await this.dataIndexService.fetchDefinitionIdByInstanceId(instanceId);\n    const isWorkflowAvailable = this.workflowCacheService.isAvailable(\n      definitionId,\n      cacheHandler,\n    );\n    return isWorkflowAvailable\n      ? await this.dataIndexService.fetchInstanceVariables(instanceId)\n      : undefined;\n  }\n\n  public async fetchInstance(args: {\n    instanceId: string;\n    cacheHandler?: CacheHandler;\n  }): Promise<ProcessInstance | undefined> {\n    const { instanceId, cacheHandler } = args;\n    const instance = await this.dataIndexService.fetchInstance(instanceId);\n    const isWorkflowAvailable = this.workflowCacheService.isAvailable(\n      instance?.processId,\n      cacheHandler,\n    );\n    return isWorkflowAvailable ? instance : undefined;\n  }\n\n  // SonataFlow Service Wrapper\n\n  public async fetchWorkflowInfoOnService(args: {\n    definitionId: string;\n    serviceUrl: string;\n    cacheHandler?: CacheHandler;\n  }): Promise<WorkflowInfo | undefined> {\n    const { definitionId, cacheHandler } = args;\n    const isWorkflowAvailable = this.workflowCacheService.isAvailable(\n      definitionId,\n      cacheHandler,\n    );\n    return isWorkflowAvailable\n      ? await this.sonataFlowService.fetchWorkflowInfoOnService(args)\n      : undefined;\n  }\n\n  public async fetchWorkflowDefinition(args: {\n    definitionId: string;\n    cacheHandler?: CacheHandler;\n  }): Promise<WorkflowDefinition | undefined> {\n    const { definitionId, cacheHandler } = args;\n    const isWorkflowAvailable = this.workflowCacheService.isAvailable(\n      definitionId,\n      cacheHandler,\n    );\n    return isWorkflowAvailable\n      ? await this.sonataFlowService.fetchWorkflowDefinition(definitionId)\n      : undefined;\n  }\n\n  public async fetchWorkflowOverviews(args: {\n    pagination?: Pagination;\n    filter?: Filter;\n  }): Promise<WorkflowOverview[] | undefined> {\n    return await this.sonataFlowService.fetchWorkflowOverviews({\n      definitionIds: this.workflowCacheService.definitionIds,\n      pagination: args.pagination,\n      filter: args.filter,\n    });\n  }\n\n  public async executeWorkflow(args: {\n    definitionId: string;\n    serviceUrl: string;\n    inputData?: ProcessInstanceVariables;\n    businessKey?: string;\n    cacheHandler?: CacheHandler;\n  }): Promise<WorkflowExecutionResponse | undefined> {\n    const { definitionId, cacheHandler } = args;\n    const isWorkflowAvailable = this.workflowCacheService.isAvailable(\n      definitionId,\n      cacheHandler,\n    );\n    return isWorkflowAvailable\n      ? await this.sonataFlowService.executeWorkflow(args)\n      : undefined;\n  }\n\n  public async retriggerWorkflow(args: {\n    definitionId: string;\n    instanceId: string;\n    serviceUrl: string;\n    cacheHandler?: CacheHandler;\n  }): Promise<boolean | undefined> {\n    const { definitionId, cacheHandler } = args;\n    const isWorkflowAvailable = this.workflowCacheService.isAvailable(\n      definitionId,\n      cacheHandler,\n    );\n    return isWorkflowAvailable\n      ? await this.sonataFlowService.retriggerInstance(args)\n      : undefined;\n  }\n\n  public async fetchWorkflowOverview(args: {\n    definitionId: string;\n    cacheHandler?: CacheHandler;\n  }): Promise<WorkflowOverview | undefined> {\n    const { definitionId, cacheHandler } = args;\n    const isWorkflowAvailable = this.workflowCacheService.isAvailable(\n      definitionId,\n      cacheHandler,\n    );\n    return isWorkflowAvailable\n      ? await this.sonataFlowService.fetchWorkflowOverview(definitionId)\n      : undefined;\n  }\n}\n"],"names":[],"mappings":"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"}