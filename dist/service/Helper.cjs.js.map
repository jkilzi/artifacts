{"version":3,"file":"Helper.cjs.js","sources":["../../src/service/Helper.ts"],"sourcesContent":["/*\n * Copyright 2024 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport type { LoggerService } from '@backstage/backend-plugin-api';\nimport type { Config } from '@backstage/config';\n\nimport fs from 'fs-extra';\n\nimport os from 'os';\n\nexport async function retryAsyncFunction<T>(args: {\n  asyncFn: () => Promise<T | undefined>;\n  maxAttempts: number;\n  delayMs: number;\n}): Promise<T> {\n  let result: T | undefined;\n  for (let i = 0; i < args.maxAttempts; i++) {\n    result = await args.asyncFn();\n    if (result !== undefined) {\n      return result;\n    }\n    await new Promise(resolve => setTimeout(resolve, args.delayMs));\n  }\n  throw new Error('Exceeded maximum number of retries for async function');\n}\n\nexport async function getWorkingDirectory(\n  config: Config,\n  logger: LoggerService,\n): Promise<string> {\n  if (!config.has('backend.workingDirectory')) {\n    return os.tmpdir();\n  }\n\n  const workingDirectory = config.getString('backend.workingDirectory');\n  try {\n    // Check if working directory exists and is writable\n    await fs.access(workingDirectory, fs.constants.F_OK | fs.constants.W_OK);\n    logger.info(`using working directory: ${workingDirectory}`);\n  } catch (err: any) {\n    logger.error(\n      `working directory ${workingDirectory} ${\n        err.code === 'ENOENT' ? 'does not exist' : 'is not writable'\n      }`,\n    );\n    throw err;\n  }\n  return workingDirectory;\n}\n\nexport async function executeWithRetry(\n  action: () => Promise<Response>,\n  maxErrors = 15,\n): Promise<Response> {\n  let response: Response;\n  let errorCount = 0;\n  // execute with retry\n  const backoff = 5000;\n  while (errorCount < maxErrors) {\n    try {\n      response = await action();\n      if (response.status >= 400) {\n        errorCount++;\n        // backoff\n        await delay(backoff);\n      } else {\n        return response;\n      }\n    } catch (e) {\n      errorCount++;\n      await delay(backoff);\n    }\n  }\n  throw new Error('Unable to execute query.');\n}\n\nexport function delay(time: number) {\n  return new Promise(r => setTimeout(r, time));\n}\n"],"names":["os","fs"],"mappings":";;;;;;;;;;AAsBA,eAAsB,mBAAsB,IAI7B,EAAA;AACb,EAAI,IAAA,MAAA,CAAA;AACJ,EAAA,KAAA,IAAS,CAAI,GAAA,CAAA,EAAG,CAAI,GAAA,IAAA,CAAK,aAAa,CAAK,EAAA,EAAA;AACzC,IAAS,MAAA,GAAA,MAAM,KAAK,OAAQ,EAAA,CAAA;AAC5B,IAAA,IAAI,WAAW,KAAW,CAAA,EAAA;AACxB,MAAO,OAAA,MAAA,CAAA;AAAA,KACT;AACA,IAAA,MAAM,IAAI,OAAQ,CAAA,CAAA,OAAA,KAAW,WAAW,OAAS,EAAA,IAAA,CAAK,OAAO,CAAC,CAAA,CAAA;AAAA,GAChE;AACA,EAAM,MAAA,IAAI,MAAM,uDAAuD,CAAA,CAAA;AACzE,CAAA;AAEsB,eAAA,mBAAA,CACpB,QACA,MACiB,EAAA;AACjB,EAAA,IAAI,CAAC,MAAA,CAAO,GAAI,CAAA,0BAA0B,CAAG,EAAA;AAC3C,IAAA,OAAOA,oBAAG,MAAO,EAAA,CAAA;AAAA,GACnB;AAEA,EAAM,MAAA,gBAAA,GAAmB,MAAO,CAAA,SAAA,CAAU,0BAA0B,CAAA,CAAA;AACpE,EAAI,IAAA;AAEF,IAAM,MAAAC,mBAAA,CAAG,OAAO,gBAAkB,EAAAA,mBAAA,CAAG,UAAU,IAAO,GAAAA,mBAAA,CAAG,UAAU,IAAI,CAAA,CAAA;AACvE,IAAO,MAAA,CAAA,IAAA,CAAK,CAA4B,yBAAA,EAAA,gBAAgB,CAAE,CAAA,CAAA,CAAA;AAAA,WACnD,GAAU,EAAA;AACjB,IAAO,MAAA,CAAA,KAAA;AAAA,MACL,qBAAqB,gBAAgB,CAAA,CAAA,EACnC,IAAI,IAAS,KAAA,QAAA,GAAW,mBAAmB,iBAC7C,CAAA,CAAA;AAAA,KACF,CAAA;AACA,IAAM,MAAA,GAAA,CAAA;AAAA,GACR;AACA,EAAO,OAAA,gBAAA,CAAA;AACT,CAAA;AAEsB,eAAA,gBAAA,CACpB,MACA,EAAA,SAAA,GAAY,EACO,EAAA;AACnB,EAAI,IAAA,QAAA,CAAA;AACJ,EAAA,IAAI,UAAa,GAAA,CAAA,CAAA;AAEjB,EAAA,MAAM,OAAU,GAAA,GAAA,CAAA;AAChB,EAAA,OAAO,aAAa,SAAW,EAAA;AAC7B,IAAI,IAAA;AACF,MAAA,QAAA,GAAW,MAAM,MAAO,EAAA,CAAA;AACxB,MAAI,IAAA,QAAA,CAAS,UAAU,GAAK,EAAA;AAC1B,QAAA,UAAA,EAAA,CAAA;AAEA,QAAA,MAAM,MAAM,OAAO,CAAA,CAAA;AAAA,OACd,MAAA;AACL,QAAO,OAAA,QAAA,CAAA;AAAA,OACT;AAAA,aACO,CAAG,EAAA;AACV,MAAA,UAAA,EAAA,CAAA;AACA,MAAA,MAAM,MAAM,OAAO,CAAA,CAAA;AAAA,KACrB;AAAA,GACF;AACA,EAAM,MAAA,IAAI,MAAM,0BAA0B,CAAA,CAAA;AAC5C,CAAA;AAEO,SAAS,MAAM,IAAc,EAAA;AAClC,EAAA,OAAO,IAAI,OAAQ,CAAA,CAAA,CAAA,KAAK,UAAW,CAAA,CAAA,EAAG,IAAI,CAAC,CAAA,CAAA;AAC7C;;;;;;;"}