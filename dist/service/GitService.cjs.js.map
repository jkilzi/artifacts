{"version":3,"file":"GitService.cjs.js","sources":["../../src/service/GitService.ts"],"sourcesContent":["/*\n * Copyright 2024 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport type { LoggerService } from '@backstage/backend-plugin-api';\nimport type { Config } from '@backstage/config';\nimport { ScmIntegrations } from '@backstage/integration';\n\nimport { Git } from './GitWrapper';\n\nexport class GitService {\n  private readonly git: Git;\n\n  private readonly logger: LoggerService;\n  private authenticated: boolean;\n\n  private readonly author = {\n    name: 'backstage-orchestrator',\n    email: 'orchestrator@backstage.io',\n  };\n\n  private readonly committer = {\n    name: 'backstage-orchestrator',\n    email: 'orchestrator@backstage.io',\n  };\n\n  constructor(logger: LoggerService, config: Config) {\n    this.logger = logger;\n    const githubIntegration = ScmIntegrations.fromConfig(config)\n      .github.list()\n      .pop();\n    this.git = Git.fromAuth({\n      username: 'x-access-token',\n      password: githubIntegration?.config.token,\n    });\n    this.authenticated = !!githubIntegration?.config.token;\n  }\n\n  async clone(repoURL: string, localPath: string): Promise<void> {\n    this.logger.info(`cloning repo ${repoURL} into ${localPath}`);\n    return this.git\n      .clone({\n        url: repoURL,\n        dir: localPath,\n        depth: 1,\n      })\n      .then(() => this.git.checkout({ dir: localPath, ref: 'main' }));\n  }\n\n  async push(dir: string, message: string): Promise<void> {\n    if (!this.authenticated) {\n      this.logger.warn(\n        'Git integration is required to be configured for push, with the token or credentials',\n      );\n      return;\n    }\n    const branch = 'main';\n    const force = true;\n    const remote = 'origin';\n    const filepath = '.';\n    this.git\n      .fetch({ remote, dir })\n      .then(() => this.git.checkout({ dir, ref: branch }))\n      .then(() => this.git.add({ dir, filepath }))\n      .then(() =>\n        this.git.commit({\n          dir,\n          message,\n          author: this.author,\n          committer: this.committer,\n        }),\n      )\n      .then(() => this.git.push({ dir, remote, remoteRef: branch, force }))\n      .finally(() => this.logger.info('push completed'))\n      .catch(ex => this.logger.error(ex));\n  }\n\n  async pull(localPath: string): Promise<void> {\n    const remoteBranch = 'origin/main';\n    const localBranch = 'main';\n    const remote = 'origin';\n    this.git\n      .fetch({ remote, dir: localPath })\n      .then(() => this.git.checkout({ dir: localPath, ref: localBranch }))\n      .then(() =>\n        this.git.merge({\n          dir: localPath,\n          ours: localBranch,\n          theirs: remoteBranch,\n          author: this.author,\n          committer: this.committer,\n        }),\n      )\n      .finally(() => this.logger.info('merge completed'))\n      .catch(ex => this.logger.error(ex));\n  }\n}\n"],"names":["ScmIntegrations","Git"],"mappings":"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"}