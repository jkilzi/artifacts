{"version":3,"file":"pagination.cjs.js","sources":["../../src/types/pagination.ts"],"sourcesContent":["/*\n * Copyright 2024 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Request } from 'express-serve-static-core';\n\nimport { PaginationInfoDTO } from '@red-hat-developer-hub/backstage-plugin-orchestrator-common';\n\nexport interface Pagination {\n  offset?: number;\n  limit?: number;\n  order?: string;\n  sortField?: string;\n}\n\nexport function buildPagination(req: Request): Pagination {\n  const pagination: Pagination = {\n    limit: undefined,\n    offset: undefined,\n    order: undefined,\n    sortField: undefined,\n  };\n\n  if (!req.body?.paginationInfo) {\n    return pagination;\n  }\n  const { offset, pageSize, orderBy, orderDirection } = req.body\n    .paginationInfo as PaginationInfoDTO;\n\n  if (!isNaN(Number(offset))) {\n    pagination.offset = Number(offset);\n  }\n\n  if (!isNaN(Number(pageSize))) {\n    pagination.limit = Number(pageSize);\n  }\n\n  if (orderBy) {\n    pagination.sortField = String(orderBy);\n  }\n\n  if (orderDirection) {\n    pagination.order = String(orderDirection).toUpperCase();\n  }\n  return pagination;\n}\n\nexport function buildPaginationTmp(\n  paginationInfo?: PaginationInfoDTO,\n): Pagination {\n  const pagination: Pagination = {\n    limit: undefined,\n    offset: undefined,\n    order: undefined,\n    sortField: undefined,\n  };\n\n  if (!paginationInfo) {\n    return pagination;\n  }\n  const { offset, pageSize, orderBy, orderDirection } = paginationInfo;\n\n  if (!isNaN(Number(offset))) {\n    pagination.offset = Number(offset);\n  }\n\n  if (!isNaN(Number(pageSize))) {\n    pagination.limit = Number(pageSize);\n  }\n\n  if (orderBy) {\n    pagination.sortField = String(orderBy);\n  }\n\n  if (orderDirection) {\n    pagination.order = String(orderDirection).toUpperCase();\n  }\n  return pagination;\n}\n"],"names":[],"mappings":";;AA0BO,SAAS,gBAAgB,GAA0B,EAAA;AACxD,EAAA,MAAM,UAAyB,GAAA;AAAA,IAC7B,KAAO,EAAA,KAAA,CAAA;AAAA,IACP,MAAQ,EAAA,KAAA,CAAA;AAAA,IACR,KAAO,EAAA,KAAA,CAAA;AAAA,IACP,SAAW,EAAA,KAAA,CAAA;AAAA,GACb,CAAA;AAEA,EAAI,IAAA,CAAC,GAAI,CAAA,IAAA,EAAM,cAAgB,EAAA;AAC7B,IAAO,OAAA,UAAA,CAAA;AAAA,GACT;AACA,EAAA,MAAM,EAAE,MAAQ,EAAA,QAAA,EAAU,SAAS,cAAe,EAAA,GAAI,IAAI,IACvD,CAAA,cAAA,CAAA;AAEH,EAAA,IAAI,CAAC,KAAA,CAAM,MAAO,CAAA,MAAM,CAAC,CAAG,EAAA;AAC1B,IAAW,UAAA,CAAA,MAAA,GAAS,OAAO,MAAM,CAAA,CAAA;AAAA,GACnC;AAEA,EAAA,IAAI,CAAC,KAAA,CAAM,MAAO,CAAA,QAAQ,CAAC,CAAG,EAAA;AAC5B,IAAW,UAAA,CAAA,KAAA,GAAQ,OAAO,QAAQ,CAAA,CAAA;AAAA,GACpC;AAEA,EAAA,IAAI,OAAS,EAAA;AACX,IAAW,UAAA,CAAA,SAAA,GAAY,OAAO,OAAO,CAAA,CAAA;AAAA,GACvC;AAEA,EAAA,IAAI,cAAgB,EAAA;AAClB,IAAA,UAAA,CAAW,KAAQ,GAAA,MAAA,CAAO,cAAc,CAAA,CAAE,WAAY,EAAA,CAAA;AAAA,GACxD;AACA,EAAO,OAAA,UAAA,CAAA;AACT;;;;"}