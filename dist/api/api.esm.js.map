{"version":3,"file":"api.esm.js","sources":["../../src/api/api.ts"],"sourcesContent":["/*\n * Copyright 2024 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { createApiRef } from '@backstage/core-plugin-api';\nimport type { JsonObject } from '@backstage/types';\n\nimport { AxiosResponse } from 'axios';\n\nimport {\n  AssessedProcessInstanceDTO,\n  ExecuteWorkflowResponseDTO,\n  GetInstancesRequest,\n  InputSchemaResponseDTO,\n  ProcessInstanceListResultDTO,\n  WorkflowOverviewDTO,\n  WorkflowOverviewListResultDTO,\n} from '@red-hat-developer-hub/backstage-plugin-orchestrator-common';\n\nexport interface OrchestratorApi {\n  abortWorkflowInstance(instanceId: string): Promise<AxiosResponse<string>>;\n\n  executeWorkflow(args: {\n    workflowId: string;\n    parameters: JsonObject;\n    businessKey?: string;\n  }): Promise<AxiosResponse<ExecuteWorkflowResponseDTO>>;\n\n  getWorkflowSource(workflowId: string): Promise<AxiosResponse<string>>;\n\n  getInstance(\n    instanceId: string,\n    includeAssessment: boolean,\n  ): Promise<AxiosResponse<AssessedProcessInstanceDTO>>;\n\n  getWorkflowDataInputSchema(\n    workflowId: string,\n    instanceId?: string,\n  ): Promise<AxiosResponse<InputSchemaResponseDTO>>;\n\n  getWorkflowOverview(\n    workflowId: string,\n  ): Promise<AxiosResponse<WorkflowOverviewDTO>>;\n\n  listWorkflowOverviews(): Promise<\n    AxiosResponse<WorkflowOverviewListResultDTO>\n  >;\n\n  listInstances(\n    args?: GetInstancesRequest,\n  ): Promise<AxiosResponse<ProcessInstanceListResultDTO>>;\n}\n\nexport const orchestratorApiRef = createApiRef<OrchestratorApi>({\n  id: 'plugin.orchestrator.api',\n});\n"],"names":[],"mappings":";;AAgEO,MAAM,qBAAqB,YAA8B,CAAA;AAAA,EAC9D,EAAI,EAAA,yBAAA;AACN,CAAC;;;;"}