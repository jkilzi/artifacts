{"version":3,"file":"WorkflowRunsTabContent.esm.js","sources":["../../src/components/WorkflowRunsTabContent.tsx"],"sourcesContent":["/*\n * Copyright 2024 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport React, { useState } from 'react';\n\nimport {\n  ErrorPanel,\n  InfoCard,\n  Link,\n  SelectItem,\n  TableColumn,\n} from '@backstage/core-components';\nimport { useApi, useRouteRef } from '@backstage/core-plugin-api';\n\nimport { Grid } from '@material-ui/core';\n\nimport {\n  capitalize,\n  ellipsis,\n  ProcessInstanceState,\n  ProcessInstanceStatusDTO,\n} from '@red-hat-developer-hub/backstage-plugin-orchestrator-common';\n\nimport { orchestratorApiRef } from '../api';\nimport { DEFAULT_TABLE_PAGE_SIZE, VALUE_UNAVAILABLE } from '../constants';\nimport usePolling from '../hooks/usePolling';\nimport { workflowInstanceRouteRef } from '../routes';\nimport { Selector } from './Selector';\nimport OverrideBackstageTable from './ui/OverrideBackstageTable';\nimport { mapProcessInstanceToDetails } from './WorkflowInstancePageContent';\nimport { WorkflowInstanceStatusIndicator } from './WorkflowInstanceStatusIndicator';\nimport { WorkflowRunDetail } from './WorkflowRunDetail';\n\nconst makeSelectItemsFromProcessInstanceValues = () =>\n  [\n    ProcessInstanceState.Active,\n    ProcessInstanceState.Error,\n    ProcessInstanceState.Completed,\n    ProcessInstanceState.Aborted,\n    ProcessInstanceState.Suspended,\n  ].map(\n    (status): SelectItem => ({\n      label: capitalize(status),\n      value: status,\n    }),\n  );\n\nexport const WorkflowRunsTabContent = () => {\n  const orchestratorApi = useApi(orchestratorApiRef);\n  const workflowInstanceLink = useRouteRef(workflowInstanceRouteRef);\n  const [statusSelectorValue, setStatusSelectorValue] = useState<string>(\n    Selector.AllItems,\n  );\n\n  const fetchInstances = React.useCallback(async () => {\n    const instances = await orchestratorApi.listInstances({});\n    const clonedData: WorkflowRunDetail[] =\n      instances.data.items?.map(mapProcessInstanceToDetails) || [];\n    return clonedData;\n  }, [orchestratorApi]);\n\n  const { loading, error, value } = usePolling(fetchInstances);\n\n  const columns = React.useMemo(\n    (): TableColumn<WorkflowRunDetail>[] => [\n      {\n        title: 'ID',\n        field: 'id',\n        render: data => (\n          <Link to={workflowInstanceLink({ instanceId: data.id })}>\n            {ellipsis(data.id)}\n          </Link>\n        ),\n        sorting: false,\n      },\n      {\n        title: 'Name',\n        field: 'name',\n      },\n      {\n        title: 'Status',\n        field: 'status',\n        render: data => (\n          <WorkflowInstanceStatusIndicator\n            status={data.status as ProcessInstanceStatusDTO}\n          />\n        ),\n      },\n      {\n        title: 'Category',\n        field: 'category',\n        render: data => capitalize(data.category ?? VALUE_UNAVAILABLE),\n      },\n      { title: 'Started', field: 'started', defaultSort: 'desc' },\n      { title: 'Duration', field: 'duration' },\n    ],\n    [workflowInstanceLink],\n  );\n\n  const statuses = React.useMemo(makeSelectItemsFromProcessInstanceValues, []);\n\n  const filteredData = React.useMemo(\n    () =>\n      (value ?? []).filter(\n        (row: WorkflowRunDetail) =>\n          statusSelectorValue === Selector.AllItems ||\n          row.status?.toLocaleLowerCase('en-US') === statusSelectorValue,\n      ),\n    [statusSelectorValue, value],\n  );\n\n  const selectors = React.useMemo(\n    () => (\n      <Grid container alignItems=\"center\">\n        <Grid item>\n          <Selector\n            label=\"Status\"\n            items={statuses}\n            onChange={setStatusSelectorValue}\n            selected={statusSelectorValue}\n          />\n        </Grid>\n      </Grid>\n    ),\n    [statusSelectorValue, statuses],\n  );\n  const paging = (value?.length || 0) > DEFAULT_TABLE_PAGE_SIZE; // this behavior fits the backstage catalog table behavior https://github.com/backstage/backstage/blob/v1.14.0/plugins/catalog/src/components/CatalogTable/CatalogTable.tsx#L228\n\n  return error ? (\n    <ErrorPanel error={error} />\n  ) : (\n    <InfoCard noPadding title={selectors}>\n      <OverrideBackstageTable\n        title=\"Workflow Runs\"\n        options={{\n          paging,\n          search: true,\n          pageSize: DEFAULT_TABLE_PAGE_SIZE,\n        }}\n        isLoading={loading}\n        columns={columns}\n        data={filteredData}\n      />\n    </InfoCard>\n  );\n};\n"],"names":[],"mappings":"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"}