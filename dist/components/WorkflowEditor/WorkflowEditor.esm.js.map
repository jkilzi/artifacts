{"version":3,"file":"WorkflowEditor.esm.js","sources":["../../../src/components/WorkflowEditor/WorkflowEditor.tsx"],"sourcesContent":["/*\n * Copyright 2024 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport React, {\n  forwardRef,\n  ForwardRefRenderFunction,\n  useCallback,\n  useImperativeHandle,\n  useMemo,\n  useState,\n} from 'react';\nimport { useNavigate } from 'react-router-dom';\n\nimport { configApiRef, useApi, useRouteRef } from '@backstage/core-plugin-api';\n\nimport {\n  ChannelType,\n  EditorEnvelopeLocator,\n  EnvelopeContentType,\n  EnvelopeMapping,\n} from '@kie-tools-core/editor/dist/api';\nimport {\n  EmbeddedEditorFile,\n  StateControl,\n} from '@kie-tools-core/editor/dist/channel';\nimport {\n  EmbeddedEditor,\n  EmbeddedEditorChannelApiImpl,\n  useEditorRef,\n} from '@kie-tools-core/editor/dist/embedded';\nimport { Notification } from '@kie-tools-core/notifications/dist/api';\nimport {\n  PromiseStateWrapper,\n  usePromiseState,\n} from '@kie-tools-core/react-hooks/dist/PromiseState';\nimport { useCancelableEffect } from '@kie-tools-core/react-hooks/dist/useCancelableEffect';\nimport { editorDisplayOptions } from '@kie-tools/serverless-workflow-combined-editor/dist/api';\nimport { SwfCombinedEditorChannelApiImpl } from '@kie-tools/serverless-workflow-combined-editor/dist/channel/SwfCombinedEditorChannelApiImpl';\nimport { SwfPreviewOptionsChannelApiImpl } from '@kie-tools/serverless-workflow-combined-editor/dist/channel/SwfPreviewOptionsChannelApiImpl';\nimport {\n  DiagnosticSeverity,\n  type Diagnostic,\n} from 'vscode-languageserver-types';\n\nimport {\n  extractWorkflowFormat,\n  fromWorkflowSource,\n  ProcessInstance,\n  toWorkflowString,\n  WorkflowDefinition,\n  WorkflowFormat,\n} from '@red-hat-developer-hub/backstage-plugin-orchestrator-common';\n\nimport { orchestratorApiRef } from '../../api';\nimport { workflowDefinitionsRouteRef } from '../../routes';\nimport { WorkflowEditorLanguageService } from './channel/WorkflowEditorLanguageService';\nimport { WorkflowEditorLanguageServiceChannelApiImpl } from './channel/WorkflowEditorLanguageServiceChannelApiImpl';\n\nexport enum EditorViewKind {\n  DIAGRAM_VIEWER = 'DIAGRAM_VIEWER',\n  EXTENDED_DIAGRAM_VIEWER = 'EXTENDED_DIAGRAM_VIEWER',\n  RUNTIME = 'RUNTIME',\n}\n\nexport interface WorkflowEditorRef {\n  validate: () => Promise<Notification[]>;\n  getContent: () => Promise<string | undefined>;\n  workflowDefinition: WorkflowDefinition | undefined;\n  isReady: boolean;\n}\n\nconst LOCALE = 'en';\n\nexport type WorkflowEditorView =\n  | { kind: EditorViewKind.DIAGRAM_VIEWER }\n  | { kind: EditorViewKind.EXTENDED_DIAGRAM_VIEWER }\n  | { kind: EditorViewKind.RUNTIME; processInstance: ProcessInstance };\n\ntype WorkflowEditorProps = {\n  workflowId: string;\n  format?: WorkflowFormat;\n  editorMode?: editorDisplayOptions;\n} & WorkflowEditorView;\n\nconst RefForwardingWorkflowEditor: ForwardRefRenderFunction<\n  WorkflowEditorRef,\n  WorkflowEditorProps\n> = (props, forwardedRef) => {\n  const orchestratorApi = useApi(orchestratorApiRef);\n  const configApi = useApi(configApiRef);\n  const contextPath = `${configApi.getString(\n    'backend.baseUrl',\n  )}/api/orchestrator/static/generated/envelope`;\n  const { workflowId, kind, format, editorMode = 'full' } = props;\n  const { editor, editorRef } = useEditorRef();\n  const [embeddedFile, setEmbeddedFile] = useState<EmbeddedEditorFile>();\n  const [workflowDefinitionPromise, setWorkflowDefinitionPromise] =\n    usePromiseState<WorkflowDefinition>();\n  const [canRender, setCanRender] = useState(false);\n  const [ready, setReady] = useState(false);\n  const navigate = useNavigate();\n  const viewWorkflowLink = useRouteRef(workflowDefinitionsRouteRef);\n\n  const currentProcessInstance = useMemo(() => {\n    if (kind !== EditorViewKind.RUNTIME) {\n      return undefined;\n    }\n    return props.processInstance;\n  }, [props, kind]);\n\n  const envelopeLocator = useMemo(\n    () =>\n      new EditorEnvelopeLocator(window.location.origin, [\n        new EnvelopeMapping({\n          type: 'workflow',\n          filePathGlob: '**/*.sw.+(json|yml|yaml)',\n          resourcesPathPrefix: contextPath,\n          envelopeContent: {\n            type: EnvelopeContentType.PATH,\n            path: `${contextPath}/serverless-workflow-combined-editor-envelope.html`,\n          },\n        }),\n      ]),\n    [contextPath],\n  );\n\n  const stateControl = useMemo(() => new StateControl(), []);\n\n  const languageService = useMemo(() => {\n    if (!embeddedFile) {\n      return undefined;\n    }\n    const workflowEditorLanguageService = new WorkflowEditorLanguageService();\n    return workflowEditorLanguageService.getLs(embeddedFile.path!);\n  }, [embeddedFile]);\n\n  const validate = useCallback(async () => {\n    if (!editor || !languageService || !embeddedFile) {\n      return [];\n    }\n\n    const content = await editor.getContent();\n    const lsDiagnostics = await languageService.getDiagnostics({\n      content: content,\n      uriPath: embeddedFile.path!,\n    });\n\n    return lsDiagnostics.map(\n      (lsDiagnostic: Diagnostic) =>\n        ({\n          path: '', // empty to not group them by path, as we're only validating one file.\n          severity:\n            lsDiagnostic.severity === DiagnosticSeverity.Error\n              ? 'ERROR'\n              : 'WARNING',\n          message: `${lsDiagnostic.message} [Line ${\n            lsDiagnostic.range.start.line + 1\n          }]`,\n          type: 'PROBLEM',\n          position: {\n            startLineNumber: lsDiagnostic.range.start.line + 1,\n            startColumn: lsDiagnostic.range.start.character + 1,\n            endLineNumber: lsDiagnostic.range.end.line + 1,\n            endColumn: lsDiagnostic.range.end.character + 1,\n          },\n        }) as Notification,\n    );\n  }, [editor, embeddedFile, languageService]);\n\n  const getContent = useCallback(async () => editor?.getContent(), [editor]);\n\n  const customEditorApi = useMemo(() => {\n    if (!embeddedFile || !languageService) {\n      return undefined;\n    }\n\n    const defaultApiImpl = new EmbeddedEditorChannelApiImpl(\n      stateControl,\n      embeddedFile,\n      LOCALE,\n      {\n        kogitoEditor_ready: () => {\n          setReady(true);\n        },\n      },\n    );\n\n    const workflowEditorLanguageServiceChannelApiImpl =\n      new WorkflowEditorLanguageServiceChannelApiImpl(languageService);\n\n    const workflowEditorPreviewOptionsChannelApiImpl =\n      new SwfPreviewOptionsChannelApiImpl({\n        editorMode,\n        defaultWidth: '50%',\n      });\n\n    return new SwfCombinedEditorChannelApiImpl({\n      defaultApiImpl,\n      swfLanguageServiceChannelApiImpl:\n        workflowEditorLanguageServiceChannelApiImpl,\n      swfPreviewOptionsChannelApiImpl:\n        workflowEditorPreviewOptionsChannelApiImpl,\n    });\n  }, [editorMode, embeddedFile, languageService, stateControl]);\n\n  useImperativeHandle(forwardedRef, () => {\n    return {\n      validate,\n      getContent,\n      workflowDefinition: workflowDefinitionPromise.data,\n      isReady: ready,\n    };\n  }, [validate, getContent, workflowDefinitionPromise.data, ready]);\n\n  useCancelableEffect(\n    useCallback(\n      ({ canceled }) => {\n        setCanRender(false);\n\n        orchestratorApi\n          .getWorkflowSource(workflowId)\n          .then(source => {\n            if (canceled.get()) {\n              return;\n            }\n            const definition = fromWorkflowSource(source.data);\n            setWorkflowDefinitionPromise({ data: definition });\n\n            const workflowFormat = extractWorkflowFormat(source.data);\n\n            if (format && workflowId && format !== workflowFormat) {\n              const link = viewWorkflowLink({\n                workflowId: workflowId,\n                format: workflowFormat,\n              });\n\n              navigate(link, { replace: true });\n\n              return;\n            }\n\n            const filename = `workflow.sw.${workflowFormat}`;\n            setEmbeddedFile({\n              path: filename,\n              getFileContents: async () =>\n                toWorkflowString(definition, workflowFormat),\n              isReadOnly: true,\n              fileExtension: workflowFormat,\n              fileName: filename,\n            });\n\n            setCanRender(true);\n          })\n          .catch(e => {\n            setWorkflowDefinitionPromise({ error: e });\n          });\n      },\n      [\n        orchestratorApi,\n        workflowId,\n        setWorkflowDefinitionPromise,\n        format,\n        viewWorkflowLink,\n        navigate,\n      ],\n    ),\n  );\n\n  const embeddedEditorWrapper = useMemo(\n    () => (\n      <PromiseStateWrapper\n        promise={workflowDefinitionPromise}\n        resolved={workflowDefinition =>\n          canRender &&\n          embeddedFile && (\n            <EmbeddedEditor\n              key={currentProcessInstance?.id ?? workflowDefinition.id}\n              ref={editorRef}\n              file={embeddedFile}\n              channelType={ChannelType.ONLINE}\n              editorEnvelopeLocator={envelopeLocator}\n              customChannelApiImpl={customEditorApi}\n              stateControl={stateControl}\n              locale={LOCALE}\n              isReady={ready}\n            />\n          )\n        }\n      />\n    ),\n    [\n      canRender,\n      currentProcessInstance?.id,\n      customEditorApi,\n      editorRef,\n      embeddedFile,\n      envelopeLocator,\n      ready,\n      stateControl,\n      workflowDefinitionPromise,\n    ],\n  );\n\n  return embeddedEditorWrapper;\n};\n\nexport const WorkflowEditor = forwardRef(RefForwardingWorkflowEditor);\n"],"names":["EditorViewKind"],"mappings":"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"}