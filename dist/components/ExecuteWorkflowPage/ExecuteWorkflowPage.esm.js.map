{"version":3,"file":"ExecuteWorkflowPage.esm.js","sources":["../../../src/components/ExecuteWorkflowPage/ExecuteWorkflowPage.tsx"],"sourcesContent":["/*\n * Copyright 2024 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport React, { useCallback, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useAsync } from 'react-use';\n\nimport {\n  InfoCard,\n  Progress,\n  ResponseErrorPanel,\n  useQueryParamState,\n} from '@backstage/core-components';\nimport {\n  useApi,\n  useRouteRef,\n  useRouteRefParams,\n} from '@backstage/core-plugin-api';\nimport type { JsonObject } from '@backstage/types';\n\nimport { Grid } from '@material-ui/core';\n\nimport {\n  InputSchemaResponseDTO,\n  QUERY_PARAM_ASSESSMENT_INSTANCE_ID,\n  QUERY_PARAM_INSTANCE_ID,\n} from '@red-hat-developer-hub/backstage-plugin-orchestrator-common';\nimport { OrchestratorForm } from '@red-hat-developer-hub/backstage-plugin-orchestrator-form-react';\n\nimport { orchestratorApiRef } from '../../api';\nimport {\n  executeWorkflowRouteRef,\n  workflowInstanceRouteRef,\n} from '../../routes';\nimport { getErrorObject } from '../../utils/ErrorUtils';\nimport { BaseOrchestratorPage } from '../BaseOrchestratorPage';\nimport JsonTextAreaForm from './JsonTextAreaForm';\n\nexport const ExecuteWorkflowPage = () => {\n  const orchestratorApi = useApi(orchestratorApiRef);\n  const { workflowId } = useRouteRefParams(executeWorkflowRouteRef);\n  const [isExecuting, setIsExecuting] = useState(false);\n  const [updateError, setUpdateError] = React.useState<Error>();\n  const [instanceId] = useQueryParamState<string>(QUERY_PARAM_INSTANCE_ID);\n  const [assessmentInstanceId] = useQueryParamState<string>(\n    QUERY_PARAM_ASSESSMENT_INSTANCE_ID,\n  );\n  const navigate = useNavigate();\n  const instanceLink = useRouteRef(workflowInstanceRouteRef);\n  const {\n    value,\n    loading,\n    error: responseError,\n  } = useAsync(async (): Promise<InputSchemaResponseDTO> => {\n    const res = await orchestratorApi.getWorkflowDataInputSchema(\n      workflowId,\n      assessmentInstanceId || instanceId,\n    );\n    return res.data;\n  }, [orchestratorApi, workflowId]);\n  const schema = value?.inputSchema;\n  const data = value?.data;\n  const {\n    value: workflowName,\n    loading: workflowNameLoading,\n    error: workflowNameError,\n  } = useAsync(async (): Promise<string> => {\n    const res = await orchestratorApi.getWorkflowOverview(workflowId);\n    return res.data.name || '';\n  }, [orchestratorApi, workflowId]);\n\n  const handleExecute = useCallback(\n    async (parameters: JsonObject) => {\n      setUpdateError(undefined);\n      try {\n        setIsExecuting(true);\n        const response = await orchestratorApi.executeWorkflow({\n          workflowId,\n          parameters,\n          businessKey: assessmentInstanceId,\n        });\n        navigate(instanceLink({ instanceId: response.data.id }));\n      } catch (err) {\n        setUpdateError(getErrorObject(err));\n      } finally {\n        setIsExecuting(false);\n      }\n    },\n    [orchestratorApi, workflowId, navigate, instanceLink, assessmentInstanceId],\n  );\n\n  const error = responseError || workflowNameError;\n  let pageContent;\n\n  if (loading || workflowNameLoading) {\n    pageContent = <Progress />;\n  } else if (error) {\n    pageContent = <ResponseErrorPanel error={error} />;\n  } else {\n    pageContent = (\n      <Grid container spacing={2} direction=\"column\" wrap=\"nowrap\">\n        {updateError && (\n          <Grid item>\n            <ResponseErrorPanel error={updateError} />\n          </Grid>\n        )}\n        <Grid item>\n          <InfoCard title=\"Run workflow\">\n            {!!schema ? (\n              <OrchestratorForm\n                schema={schema}\n                handleExecute={handleExecute}\n                isExecuting={isExecuting}\n                isDataReadonly={!!assessmentInstanceId}\n                data={data}\n              />\n            ) : (\n              <JsonTextAreaForm\n                handleExecute={handleExecute}\n                isExecuting={isExecuting}\n              />\n            )}\n          </InfoCard>\n        </Grid>\n      </Grid>\n    );\n  }\n\n  return (\n    <BaseOrchestratorPage\n      noPadding={workflowNameLoading}\n      title={workflowName}\n      type=\"Workflows\"\n      typeLink=\"/orchestrator\"\n    >\n      {pageContent}\n    </BaseOrchestratorPage>\n  );\n};\n"],"names":[],"mappings":"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"}